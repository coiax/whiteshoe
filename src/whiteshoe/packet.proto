message Packet {
    // to catch duplicates
    required fixed32 packet_id = 1;
    repeated int32 payload_types = 2 [packed=true];
    // payload type can be any of the following
    // and a packet can contain multiple payloads, although not all of them
    // make sense together
    // 0 - c->s get games list

    // 1 - s->c games running
    message Game {
        required int32 game_id = 1;
        optional string name = 2;
        optional string mode = 3;
        optional int32 max_players = 4;
        optional int32 current_players = 5;
    }
    repeated Game games = 100;

    // 2 - c->s make new game
    // New game creation options
    optional int32 max_players = 201;
    optional string map_generator = 202;
    optional string new_game_name = 203;
    optional string new_game_mode = 204;
    optional bool join_new_game = 205;

    // 3 - c<->s error
    optional int32 error_type = 300;
    optional string error_message = 301;

    // 4 c->s game action
    optional int32 action_game_id = 400;
    optional int32 action = 401;
    optional int32 argument = 402;

    // 5 c->s join game
    // If true, just attempt to join any game
    optional bool autojoin = 500;
    // if false, join this game_id
    optional int32 join_game_id = 501;

    // 6 - vision update
    optional int32 vision_game_id = 600;
    repeated sint32 objects = 601 [packed=true];
    // objects consists of 4-tuples: x,y,obj_type,attr_id
    // attr_id is either -1 for no attributes, or an index of an attribute
    message Attribute {
        optional int32 player_id = 1;
        optional int32 direction = 2;
        optional int32 team = 3;
        optional int32 hp_max = 4;
        optional int32 hp = 5;
        optional int32 max_ammo = 6;
        optional int32 ammo = 7;
        optional int32 owner = 8;
        optional int32 size = 9;
        optional bool historical = 10;
        optional string name = 11;
    }
    repeated Attribute attributes = 602;
    optional bool clear_all = 603;

    // 7 - keep alive
    optional sint64 timestamp = 700;

    // 8 - game status
    optional int32 status_game_id = 800;
    optional int32 status = 801;

    // general
    optional int32 your_player_id = 802;

    // status joined
    optional string game_name = 803;
    optional string game_mode = 804;
    optional int32 game_max_players = 805;
    optional int32 game_current_players = 806;
    optional string game_vision = 807;

    // status left
    // status spawn

    // status death (You've died.)
    // status damaged (You've been damaged, but haven't died.)

    optional sint32 responsible_id = 808;
    // Might not include the person responsible in some circumstances
    // such as crime novels. Is set to -1 in this case.
    optional int32 damage_type = 809;

    // status kill (You've killed somone; you monster.)
    optional int32 victim_id = 810;

    // status gamepause
    // (The game has been paused, no inputs will be accepted.
    //  If unpause_time is given, the game will unpause at this time.)
    repeated sint32 unpause_time = 811;
    // if true, countdown to the unpausing.
    optional bool countdown = 812;
    // in the format: year, month, day, hour, minute, second, microsecond

    // status gameresume
    // (The game has been resumed, inputs are now accepted.)


}
